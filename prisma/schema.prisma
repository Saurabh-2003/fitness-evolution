datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ROLE {
  ADMIN
  USER
  TRAINER
}

enum SEX {
  MALE
  FEMALE
  OTHER
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String          @unique
  emailVerified  DateTime?
  image          String?
  age            Int?
  sex            SEX?
  height         Float?
  weight         Float?
  fitnessGoals   String?
  accounts       Account[]
  sessions       Session[]
  role           ROLE            @default(USER)
  Authenticators Authenticator[]
  trainerEmail  String?
  trainerName String?
  studentsEmail String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  conversations1 Conversation[] @relation("Participant1Conversations")
  conversations2 Conversation[] @relation("Participant2Conversations")

  messages Message[]

  Schedules Schedule[]
}

model Conversation {
  id             String    @id @default(cuid())
  createdAt      DateTime  @default(now())
  lastMessageAt  DateTime  @default(now())
  messages       Message[]
  participant1Id String
  participant2Id String
  participant1   User      @relation("Participant1Conversations", fields: [participant1Id], references: [id], onDelete: Cascade)
  participant2   User      @relation("Participant2Conversations", fields: [participant2Id], references: [id], onDelete: Cascade)

  @@unique([participant1Id, participant2Id])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role         ROLE     @default(USER)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Message {
  id String @id @default(cuid())

  from           String
  to             String
  subject        String?
  message        String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         String?
  conversationId String?

  User         User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

model Schedule {
  id          String   @id @default(cuid())
  date        String?
  time        String?
  meetingLink String?
  memberId    String?
  subject     String?
  body        String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  User   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String?
}
